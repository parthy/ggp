;========================================================================
;
; Game of Death
; - original from YAG^2P (GGP lecture WS 06/07)
; - debugged and slightly changed by Stephan Schiffel
;
; This Game describes a a matrix of cells of which one is either living or 
; dead. The cells are complying to the rules of Conway's Game of Life.
; The task of the player is to kill all cells.
;
;===============================================================================

(role robot)

; b: dead cell
; o: living cell
(init (cell 1 1 o))
(init (cell 1 2 o))
(init (cell 1 3 o))
(init (cell 1 4 b))
(init (cell 1 5 o))
(init (cell 2 1 o))
(init (cell 2 2 b))
(init (cell 2 3 b))
(init (cell 2 4 b))
(init (cell 2 5 b))
(init (cell 3 1 b))
(init (cell 3 2 b))
(init (cell 3 3 b))
(init (cell 3 4 o))
(init (cell 3 5 o))
(init (cell 4 1 b))
(init (cell 4 2 o))
(init (cell 4 3 o))
(init (cell 4 4 b))
(init (cell 4 5 o))
(init (cell 5 1 o))
(init (cell 5 2 b))
(init (cell 5 3 o))
(init (cell 5 4 b))
(init (cell 5 5 o))

(init (step 0))

;successor/2 relations
(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)

(<= (smaller ?x ?y)
	(succ ?x ?y))
(<= (smaller ?x ?z)
	(succ ?y ?z)
	(smaller ?x ?y))

(<= (number ?x)
	(succ ?x ?y))
(<= (number ?y)
	(succ ?x ?y))

;rcsuccessor/2 relations (cyclic)
(rcsucc 1 2)
(rcsucc 2 3)
(rcsucc 3 4)
(rcsucc 4 5)
(rcsucc 5 1)

;rcpredecessor/2 relations (cyclic)
(rcpred 1 5)
(rcpred 2 1)
(rcpred 3 2)
(rcpred 4 3)
(rcpred 5 4)

;legal moves
(<= (legal robot (kill ?x ?y))
    (true (cell ?x ?y o)))

(<= (next (step ?y))
	(true (step ?x))
    (succ ?x ?y))

;next cell should be blank if it is killed
(<= (next (cell ?x ?y b))
    (does robot (kill ?x ?y)))

;game of death rules

;first rule: cell dies if there are less than two neighbours
;second rule: cell dies if there are more than three neighbours
(<= (next (cell ?x ?y b))
	(true (cell ?x ?y ?c))
	(not (does robot (kill ?x ?y)))
    (countneighbours ?x ?y 0 ?n)
	(distinct ?n 2)
	(distinct ?n 3)
	(distinct ?n 4)
	(distinct ?n 5))

;third & fourth rule: cell lives or comes to live if it has three neighbours
(<= (next (cell ?x ?y o))
	(true (cell ?x ?y ?c))
	(not (does robot (kill ?x ?y)))
    (countneighbours ?x ?y 0 3))
(<= (next (cell ?x ?y o))
	(true (cell ?x ?y ?c))
	(not (does robot (kill ?x ?y)))
    (countneighbours ?x ?y 0 4))
(<= (next (cell ?x ?y o))
	(true (cell ?x ?y ?c))
	(not (does robot (kill ?x ?y)))
    (countneighbours ?x ?y 0 5))

;third rule: only lives with 2 neighbours if lived before
(<= (next (cell ?x ?y o))
    (true (cell ?x ?y o))
	(not (does robot (kill ?x ?y)))
    (countneighbours ?x ?y 0 2))

(<= (next (cell ?x ?y b))
    (true (cell ?x ?y b))
	(not (does robot (kill ?x ?y)))
    (countneighbours ?x ?y 0 2))

;countneighbours/4 relation; counts all neighbours a cell might have (only alive neighbours will be counted)
(<= (countneighbours ?x ?y ?n ?s)
	(rcpred ?x ?xp)
	(rcpred ?y ?yp)
	(rcsucc ?x ?xs)
	(rcsucc ?y ?ys)
    (countifalive ?xp ?yp ?n ?c1)
    (countifalive ?x ?yp ?c1 ?c2)
    (countifalive ?xs ?yp ?c2 ?c3)
    (countifalive ?xp ?y ?c3 ?c4)
    (countifalive ?xs ?y ?c4 ?c5)
    (countifalive ?xs ?ys ?c5 ?c6)
    (countifalive ?x ?ys ?c6 ?c7)
    (countifalive ?xp ?ys ?c7 ?s))

(<= (countifalive ?x ?y ?i ?o)
    (true (cell ?x ?y o))
	(succ ?i ?o))
(<= (countifalive ?x ?y ?i ?i)
	(true (cell ?x ?y ?c))
	(distinct ?c o)
	(number ?i))

(<= any_occupied
	(true (cell ?x ?y o)))
(<= clear
    (not any_occupied))

(<= terminal
	clear)
(<= terminal
	(true (step 30)))

(<= (goal robot 100)
	(countalive 1 1 0 0))
(<= (goal robot 80)
	(countalive 1 1 0 ?n)
	(distinct ?n 0)
	(smaller ?n 6))
(<= (goal robot 60)
	(countalive 1 1 0 ?n)
	(smaller 5 ?n)
	(smaller ?n 11))
(<= (goal robot 40)
	(countalive 1 1 0 ?n)
	(smaller 10 ?n)
	(smaller ?n 16))
(<= (goal robot 20)
	(countalive 1 1 0 ?n)
	(smaller 15 ?n)
	(smaller ?n 21))
(<= (goal robot 0)
	(countalive 1 1 0 ?n)
	(smaller 20 ?n))

; (countalive ?x ?y ?n1 ?n)
(<= (countalive 5 5 ?n1 ?n)
	(countifalive 5 5 ?n1 ?n))
(<= (countalive ?x 5 ?n1 ?n)
	(rcsucc ?x ?x1)
	(distinct ?x 5)
	(countifalive ?x 5 ?n1 ?n2)
	(countalive ?x1 1 ?n2 ?n))
(<= (countalive ?x ?y ?n1 ?n)
	(rcsucc ?y ?y1)
	(distinct ?y 5)
	(countifalive ?x ?y ?n1 ?n2)
	(countalive ?x ?y1 ?n2 ?n))
