; 5-player smallest game
(role player1)
(role player2)
(role player3)
(role player4)
(role player5)

; Initial state
(init (round 1))
(init (score player1 0))
(init (score player2 0))
(init (score player3 0))
(init (score player4 0))
(init (score player5 0))

; Legal moves
(<= (legal ?p (select ?n))
    (role ?p)
    (number ?n))

; Transition rules
(<= (non_unique_selection ?n)
    (does ?p1 (select ?n))
    (does ?p2 (select ?n))
    (distinct ?p1 ?p2))
(<= (next (round ?new_round))
    (true (round ?old_round))
    (succ ?old_round ?new_round))
(<= (next (score ?p ?score))
    (true (score ?p ?score))
    (does ?p (select ?n))
    (does ?other (select ?n))
    (distinct ?p ?other))
(<= (next (score ?p ?score))
    (true (score ?p ?score))
    (does ?p (select ?n))
    (does ?other (select ?m))
    (greater ?n ?m)
    (not (non_unique_selection ?m)))
(<= (worse_or_non_unique ?s1 ?s2)
    (greater ?s1 ?s2))
(<= (worse_or_non_unique ?s1 ?s2)
    (number ?s2)
    (non_unique_selection ?s1))
(<= (next (score player1 ?new_score))
    (true (score player1 ?old_score))
    (add_10 ?old_score ?new_score)
    (does player1 (select ?n))
    (not (non_unique_selection ?n))
    (does player2 (select ?player2_move))
    (worse_or_non_unique ?player2_move ?n)
    (does player3 (select ?player3_move))
    (worse_or_non_unique ?player3_move ?n)
    (does player4 (select ?player4_move))
    (worse_or_non_unique ?player4_move ?n)
    (does player5 (select ?player5_move))
    (worse_or_non_unique ?player5_move ?n)
)
(<= (next (score player2 ?new_score))
    (true (score player2 ?old_score))
    (add_10 ?old_score ?new_score)
    (does player2 (select ?n))
    (not (non_unique_selection ?n))
    (does player1 (select ?player1_move))
    (worse_or_non_unique ?player1_move ?n)
    (does player3 (select ?player3_move))
    (worse_or_non_unique ?player3_move ?n)
    (does player4 (select ?player4_move))
    (worse_or_non_unique ?player4_move ?n)
    (does player5 (select ?player5_move))
    (worse_or_non_unique ?player5_move ?n)
)
(<= (next (score player3 ?new_score))
    (true (score player3 ?old_score))
    (add_10 ?old_score ?new_score)
    (does player3 (select ?n))
    (not (non_unique_selection ?n))
    (does player1 (select ?player1_move))
    (worse_or_non_unique ?player1_move ?n)
    (does player2 (select ?player2_move))
    (worse_or_non_unique ?player2_move ?n)
    (does player4 (select ?player4_move))
    (worse_or_non_unique ?player4_move ?n)
    (does player5 (select ?player5_move))
    (worse_or_non_unique ?player5_move ?n)
)
(<= (next (score player4 ?new_score))
    (true (score player4 ?old_score))
    (add_10 ?old_score ?new_score)
    (does player4 (select ?n))
    (not (non_unique_selection ?n))
    (does player1 (select ?player1_move))
    (worse_or_non_unique ?player1_move ?n)
    (does player2 (select ?player2_move))
    (worse_or_non_unique ?player2_move ?n)
    (does player3 (select ?player3_move))
    (worse_or_non_unique ?player3_move ?n)
    (does player5 (select ?player5_move))
    (worse_or_non_unique ?player5_move ?n)
)
(<= (next (score player5 ?new_score))
    (true (score player5 ?old_score))
    (add_10 ?old_score ?new_score)
    (does player5 (select ?n))
    (not (non_unique_selection ?n))
    (does player1 (select ?player1_move))
    (worse_or_non_unique ?player1_move ?n)
    (does player2 (select ?player2_move))
    (worse_or_non_unique ?player2_move ?n)
    (does player3 (select ?player3_move))
    (worse_or_non_unique ?player3_move ?n)
    (does player4 (select ?player4_move))
    (worse_or_non_unique ?player4_move ?n)
)
; Termination conditions
(<= terminal
    (true (round 25)))
(<= terminal
    (true (score ?p 100)))

; Payoffs
(<= (goal ?p ?score)
    (true (score ?p ?score)))

(add_10 0 10)
(add_10 10 20)
(add_10 20 30)
(add_10 30 40)
(add_10 40 50)
(add_10 50 60)
(add_10 60 70)
(add_10 70 80)
(add_10 80 90)
(add_10 90 100)
(<= (greater ?m ?n)
    (succ ?n ?m))
(<= (greater ?m ?n)
    (succ ?k ?m)
    (greater ?k ?n))
(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(number 1)
(number 2)
(number 3)
(number 4)
(number 5)
(number 6)
(number 7)
(number 8)
(number 9)
(number 10)
